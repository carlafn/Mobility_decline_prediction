###### Total Mobility

import os
import pandas as pd

##set directory
os.chdir('C:/Users/Documents/Mobility decline')


##Import MLFlow libraries
from MLFlow_Classification import *


##Load dataset
file1 = 'desfecho_mob.csv'
banco = pd.read_csv(file1)
banco.head()

banco.describe()

print(banco['desfecho_mob'])


##Prepare Experiment
exp = setup(banco, target='desfecho_mob', normalize=True, normalize_method="zscore", resample=True,
            resample_method="random_over"
           # , remove_multicollinearity=True, multicollinearity_threshold=0.7
           )

X, y, X_train, X_test, y_train, y_test, seed, prep_pipe, _ = exp

X_train.shape

y_train.shape

X_test.shape 

y_test.shape

X_train

y

compare_models(fold=10, round=4, sort="AUC", turbo=True)


##Create models:
rfmodel = create_model(estimator='rf')
catmodel = create_model(estimator='catboost')
ridgemodel = create_model(estimator='ridge')
lrmodel = create_model(estimator='lr')
etmodel = create_model(estimator='et')
gbcmodel = create_model(estimator='gbc')
lightmodel = create_model(estimator='lightgbm')
ldamodel = create_model(estimator='lda')
adamodel = create_model(estimator='ada')
xgbmodel = create_model(estimator='xgboost')
nbmodel = create_model(estimator='nb')
rbfsvmodel = create_model(estimator='rbfsvm')
qdamodel = create_model(estimator='qda')
knnmodel = create_model(estimator='knn')
dtmodel = create_model(estimator='dt')


##Optimization:
rfmodel = tune_model('rf', optimize='AUC')
catmodel = tune_model('catboost', optimize='AUC')
ridgemodel = tune_model('ridge', optimize='AUC')


##Evaluate models
evaluate_model(rfmodel)
evaluate_model(catmodel)
evaluate_model(ridgemodel)
evaluate_model(lrmodel)


##Select best algorithm based on AUROC in test set and obtain other metrics
preds_rfmodel = predict_model(rfmodel)
preds_catmodel = predict_model(catmodel)
preds_lrmodel = predict_model(lrmodel)


## Best thresholds for Random forest model
y_true=preds_rfmodel['desfecho_mob']
y_pred=preds_rfmodel['Score']

fpr, tpr, thresholds = roc_curve(y_true, y_pred)

res = pd.DataFrame({'FPR': fpr, 'TPR': tpr, 'Threshold': thresholds})
res[['TPR', 'FPR', 'Threshold']]

res.to_excel("thresh_mobility_rfmodel.xlsx")

gmeans = np.sqrt(tpr * (1-fpr))
ix = argmax(gmeans)
print('Best Threshold=%f, G-Mean=%.3f' % (thresholds[ix], gmeans[ix]))


## Plot SHAP for Random Forest
import matplotlib.pyplot as plt
import shap 

f = plt.figure()
ax = f.add_subplot()
shap_values = shap.TreeExplainer(rfmodel).shap_values(X_test)
shap.summary_plot(shap_values, X_test, max_display=5
                  , plot_type="bar"
                 )
ax.spines['bottom'].set_color('gray')
f.savefig("shap_mobility.png", bbox_inches='tight', dpi=1200, facecolor='white', 
          edgecolor='white', 
          transparent=True)



## ROC curve plot of top-3 algorithms
import sklearn.metrics as metrics

fpr_mobilidade_rf, tpr_mobilidade_rf, auc_thresholds_mobilidade_rf = metrics.roc_curve(preds_rfmodel['desfecho_mob'],  
                                                  preds_rfmodel['Score'])

fpr_mobilidade_cat, tpr_mobilidade_cat, auc_thresholds_mobilidade_cat = metrics.roc_curve(preds_catmodel['desfecho_mob'],  
                                                  preds_catmodel['Score'])

fpr_mobilidade_rigde, tpr_mobilidade_rigde, auc_thresholds_mobilidade_rigde = metrics.roc_curve(preds_ridgemodel['desfecho_mob'],  
                                                  preds_ridgemodel['pred'])

plt.figure(4, figsize=(6, 3.3),  facecolor='white')
plt.style.use('grayscale')

font = {'family': 'sans',
        'color':  'black',
        'weight': 'normal',
        'size': 12,
        }

plt.plot(fpr_mobilidade_rf,tpr_mobilidade_rf,label="Random Forest, AUC= 0.75[0.69-0.80]"
         , linestyle='-.', linewidth=1.2
         , color='black'
        # ,  marker='s', markersize=3
        )
plt.plot(fpr_mobilidade_cat,tpr_mobilidade_cat,label="CatBoost Classifier, AUC= 0.72[0.66-0.78]"
         , linestyle='-', linewidth=1.2
         , color='gray'
         #, marker='s', markersize=3
        )
plt.plot(fpr_mobilidade_rigde,tpr_mobilidade_rigde,label="Ridge Classifier, AUC= 0.72[0.66-0.77]"
         , linestyle='--', linewidth=1.2
         , color='darkgray'
         #, marker='^', markersize=3
        )

plt.legend(loc=0)
plt.plot([0,1], [0,1], color='silver', linestyle=':')
plt.xlabel("1-Specificity (False Positive Rate)", fontdict=font, fontweight='bold')
plt.ylabel("Sensitivity (True Positive Rate)", fontdict=font, fontweight='bold')
plt.title('Total Mobility', fontsize=15)
plt.legend(loc=4, prop={"family":"sans",  'size': 11})
plt.grid(b=None)

plt.savefig('multiple_roc_curve_mobility.jpg',dpi=300)
plt.show()


## Creating Calibration Curve for RF model
from sklearn.calibration import calibration_curve

x, y = calibration_curve(y_test, preds_rfmodel['Score'], n_bins = 10, normalize = True) 
  
# Plot calibration curve 
    
# Plot perfectly calibrated 
plt.figure(4, figsize=(6, 3.3),  facecolor='white')

plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams["axes.edgecolor"] = "black"
plt.rcParams["axes.linewidth"] = 0.7

plt.plot([0, 1], [0, 1], linestyle = ':', color="grey", label = 'Prefectly Calibrated') 
plt.grid(False)

# Plot model's calibration curve 
plt.plot(y, x, marker = '.', label = 'Random Forest classifier', color="red",) 
  
leg = plt.legend(loc = 'lower right') 
plt.xlabel('Predicted Probability') 
plt.ylabel('Fraction of positives') 
plt.title("Total Mobility")
plt.tight_layout()

plt.savefig('calibration_curve_mobility.jpg',dpi=300)
plt.show()

#########################################################################

###### Walking

import os
import pandas as pd

##set directory
os.chdir('C:/Users/Documents/Mobility decline')


##Import MLFlow libraries
from MLFlow_Classification import *


##Load dataset
file1 = 'desfecho_caminhar.csv'
banco = pd.read_csv(file1)
banco.head()

banco.describe()

print(banco['desfecho_caminhar'])


##Prepare Experiment
exp = setup(banco, target='desfecho_caminhar', normalize=True, normalize_method="zscore", resample=True,
            resample_method="random_over"
           # , remove_multicollinearity=True, multicollinearity_threshold=0.7
           )

X, y, X_train, X_test, y_train, y_test, seed, prep_pipe, _ = exp

X_train.shape

y_train.shape

X_test.shape 

y_test.shape

X_train

y

compare_models(fold=10, round=4, sort="AUC", turbo=True)


##Create models:
rfmodel = create_model(estimator='rf')
catmodel = create_model(estimator='catboost')
ridgemodel = create_model(estimator='ridge')
lrmodel = create_model(estimator='lr')
etmodel = create_model(estimator='et')
gbcmodel = create_model(estimator='gbc')
lightmodel = create_model(estimator='lightgbm')
ldamodel = create_model(estimator='lda')
adamodel = create_model(estimator='ada')
xgbmodel = create_model(estimator='xgboost')
nbmodel = create_model(estimator='nb')
rbfsvmodel = create_model(estimator='rbfsvm')
qdamodel = create_model(estimator='qda')
knnmodel = create_model(estimator='knn')
dtmodel = create_model(estimator='dt')


##Optimization:
rfmodel = tune_model('rf', optimize='AUC')
catmodel = tune_model('catboost', optimize='AUC')
ridgemodel = tune_model('ridge', optimize='AUC')


##Evaluate models
evaluate_model(rfmodel)
evaluate_model(catmodel)
evaluate_model(ridgemodel)
evaluate_model(lrmodel)


##Select best algorithm based on AUROC in test set and obtain other metrics
preds_rfmodel = predict_model(rfmodel)
preds_catmodel = predict_model(catmodel)
preds_lrmodel = predict_model(lrmodel)


## Best thresholds for SVM radial
y_true=preds_rbfsvmmodel['desfecho_caminhar']
y_pred=preds_rbfsvmmodel['Score']

fpr, tpr, thresholds = roc_curve(y_true, y_pred)

res = pd.DataFrame({'FPR': fpr, 'TPR': tpr, 'Threshold': thresholds})
res[['TPR', 'FPR', 'Threshold']]
res.to_excel("thresh_preds_svm_walking.xlsx")

gmeans = np.sqrt(tpr * (1-fpr))
ix = argmax(gmeans)
print('Best Threshold=%f, G-Mean=%.3f' % (thresholds[ix], gmeans[ix]))


## Plot SHAP for Random Forest
import matplotlib.pyplot as plt
import shap 

f = plt.figure()
ax = f.add_subplot()
shap_values = shap.TreeExplainer(rfmodel).shap_values(X_test)
shap.summary_plot(shap_values, X_test, max_display=5
                  , plot_type="bar"
                 )
ax.spines['bottom'].set_color('gray')
f.savefig("shap_mobility.png", bbox_inches='tight', dpi=1200, facecolor='white', 
          edgecolor='white', 
          transparent=True)



## ROC curve plot of top-3 algorithms
import sklearn.metrics as metrics

fpr_caminhar_rf, tpr_caminhar_rf, auc_thresholds_caminhar_rf = metrics.roc_curve(preds_rbfsvmmodel['desfecho_mob'],  
                                                  preds_rbfsvmmodel['Score'])

fpr_caminhar_cat, tpr_caminhar_cat, auc_thresholds_caminhar_cat = metrics.roc_curve(preds_rfmodel['desfecho_mob'],  
                                                  preds_rfmodel['Score'])

fpr_caminhar_rigde, tpr_caminhar_rigde, auc_thresholds_caminhar_rigde = metrics.roc_curve(preds_knnmodel['desfecho_mob'],  
                                                  preds_knnmodel['pred'])

plt.figure(4, figsize=(6, 3.3),  facecolor='white')
plt.style.use('grayscale')

font = {'family': 'sans',
        'color':  'black',
        'weight': 'normal',
        'size': 12,
        }

plt.plot(fpr_caminhar_rbfsvm,tpr_caminhar_rbfsvm,label="SVM Radial Kernel, AUC=0.78[0.74-0.82]"
        , linestyle='-.', linewidth=1.2
         , color='black'
        # ,  marker='s', markersize=3
        )
plt.plot(fpr_caminhar_rf,tpr_caminhar_rf,label="Random Forest, AUC=0.78[0.73-0.83]"
        , linestyle='-', linewidth=1.2
         , color='gray'
        # ,  marker='s', markersize=3
        )
plt.plot(fpr_caminhar_knn,tpr_caminhar_knn,label="K Nearest Neighbour, AUC=0.77[0.72-0.81]"
         , linestyle='--', linewidth=1.2
         , color='darkgray'
         #, marker='s', markersize=3
        )

plt.legend(loc=0)
plt.plot([0,1], [0,1], color='silver', linestyle=':')
plt.xlabel("1-Specificity (False Positive Rate)", fontdict=font, fontweight='bold')
plt.ylabel("Sensitivity (True Positive Rate)", fontdict=font, fontweight='bold')
plt.title('Total Mobility', fontsize=15)
plt.legend(loc=4, prop={"family":"sans",  'size': 11})
plt.grid(b=None)

plt.savefig('multiple_roc_curve_walking.jpg',dpi=300)
plt.show()


## Creating Calibration Curve for RF model
from sklearn.calibration import calibration_curve

x, y = calibration_curve(y_test, (preds_rbfsvmmodel['Score'], n_bins = 10, normalize = True) 
  
# Plot calibration curve 
    
# Plot perfectly calibrated 
plt.figure(4, figsize=(6, 3.3),  facecolor='white')

plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams["axes.edgecolor"] = "black"
plt.rcParams["axes.linewidth"] = 0.7

plt.plot([0, 1], [0, 1], linestyle = ':', color="grey", label = 'Prefectly Calibrated') 
plt.grid(False)

# Plot model's calibration curve 
plt.plot(y, x, marker = '.', label = 'SVM Radial', color="red",) 
  
leg = plt.legend(loc = 'lower right') 
plt.xlabel('Predicted Probability') 
plt.ylabel('Fraction of positives') 
plt.title("Total Mobility")
plt.tight_layout()

plt.savefig('calibration_curve_walking.jpg',dpi=300)
plt.show()

##########################################################################

###### Climbing stairs

import os
import pandas as pd

##set directory
os.chdir('C:/Users/Documents/Mobility decline')


##Import MLFlow libraries
from MLFlow_Classification import *


##Load dataset
file1 = 'desfecho_escadas.csv'
banco = pd.read_csv(file1)
banco.head()

banco.describe()

print(banco['desfecho_escadas'])


##Prepare Experiment
exp = setup(banco, target='desfecho_escadas', normalize=True, normalize_method="zscore", resample=True,
            resample_method="random_over"
           # , remove_multicollinearity=True, multicollinearity_threshold=0.7
           )

X, y, X_train, X_test, y_train, y_test, seed, prep_pipe, _ = exp

X_train.shape

y_train.shape

X_test.shape 

y_test.shape

X_train

y

compare_models(fold=10, round=4, sort="AUC", turbo=True)


##Create models:
rfmodel = create_model(estimator='rf')
catmodel = create_model(estimator='catboost')
ridgemodel = create_model(estimator='ridge')
lrmodel = create_model(estimator='lr')
etmodel = create_model(estimator='et')
gbcmodel = create_model(estimator='gbc')
lightmodel = create_model(estimator='lightgbm')
ldamodel = create_model(estimator='lda')
adamodel = create_model(estimator='ada')
xgbmodel = create_model(estimator='xgboost')
nbmodel = create_model(estimator='nb')
rbfsvmodel = create_model(estimator='rbfsvm')
qdamodel = create_model(estimator='qda')
knnmodel = create_model(estimator='knn')
dtmodel = create_model(estimator='dt')


##Optimization:
rfmodel = tune_model('rf', optimize='AUC')
catmodel = tune_model('catboost', optimize='AUC')
ridgemodel = tune_model('ridge', optimize='AUC')


##Evaluate models
evaluate_model(rfmodel)
evaluate_model(catmodel)
evaluate_model(ridgemodel)
evaluate_model(lrmodel)


##Select best algorithm based on AUROC in test set and obtain other metrics
preds_rfmodel = predict_model(rfmodel)
preds_catmodel = predict_model(catmodel)
preds_lrmodel = predict_model(lrmodel)


## Best thresholds for SVM radial
y_true=preds_rbfsvmmodel['desfecho_escadas']
y_pred=preds_rbfsvmmodel['Score']

fpr, tpr, thresholds = roc_curve(y_true, y_pred)

res = pd.DataFrame({'FPR': fpr, 'TPR': tpr, 'Threshold': thresholds})
res[['TPR', 'FPR', 'Threshold']]
res.to_excel("thresh_preds_svm_walking.xlsx")

gmeans = np.sqrt(tpr * (1-fpr))
ix = argmax(gmeans)
print('Best Threshold=%f, G-Mean=%.3f' % (thresholds[ix], gmeans[ix]))


## Plot SHAP for Random Forest
import matplotlib.pyplot as plt
import shap 

f = plt.figure()
ax = f.add_subplot()
shap_values = shap.TreeExplainer(rfmodel).shap_values(X_test)
shap.summary_plot(shap_values, X_test, max_display=5
                  , plot_type="bar"
                 )
ax.spines['bottom'].set_color('gray')
f.savefig("shap_mobility.png", bbox_inches='tight', dpi=1200, facecolor='white', 
          edgecolor='white', 
          transparent=True)



## ROC curve plot of top-3 algorithms
import sklearn.metrics as metrics

fpr_escadas_rf, tpr_escadas_rf, auc_thresholds_escadas_rf = metrics.roc_curve(banco_escadas_rf['desfecho_escadas'],  
                                                  banco_escadas_rf['Score'])

fpr_escadas_rbfsvm, tpr_escadas_rbfsvm, auc_thresholds_escadas_rbfsvm = metrics.roc_curve(banco_escadas_rbfsvm['desfecho_escadas'],  
                                                  banco_escadas_rbfsvm['Score'])

fpr_escadas_cat, tpr_escadas_cat, auc_thresholds_escadas_cat = metrics.roc_curve(banco_escadas_cat['desfecho_escadas'],  
                                                  banco_escadas_cat['Score'])

plt.figure(4, figsize=(6, 3.3),  facecolor='white')
plt.style.use('grayscale')

font = {'family': 'sans',
        'color':  'black',
        'weight': 'normal',
        'size': 12,
        }

plt.plot(fpr_escadas_rf,tpr_escadas_rf,label="Random Forest, AUC= 0.79[0.74-0.83]"
      , linestyle='-.', linewidth=1.2
         , color='black'
        # ,  marker='s', markersize=3
        )
plt.plot(fpr_escadas_rbfsvm,tpr_escadas_rbfsvm,label="SVM Radial Kernel, AUC=0.78[0.739-0.823]"
          , linestyle='-', linewidth=1.2
         , color='gray'
         #, marker='^', markersize=3
        )
plt.plot(fpr_escadas_cat,tpr_escadas_cat,label="CatBoost Classifier, AUC= 0.78[0.74-0.82]"
         , linestyle='--', linewidth=1.2
         , color='darkgray'
         #, marker='s', markersize=3
        )

plt.legend(loc=0)
plt.plot([0,1], [0,1], color='silver', linestyle=':')
plt.xlabel("1-Specificity (False Positive Rate)", fontdict=font, fontweight='bold')
plt.ylabel("Sensitivity (True Positive Rate)", fontdict=font, fontweight='bold')
plt.title('Total Mobility', fontsize=15)
plt.legend(loc=4, prop={"family":"sans",  'size': 11})
plt.grid(b=None)

plt.savefig('multiple_roc_curve_climbing.jpg',dpi=300)
plt.show()


## Creating Calibration Curve for RF model
x, y = calibration_curve(y_test, preds_rfmodel['Score'], n_bins = 10, normalize = True) 
  
# Plot calibration curve 
    
# Plot perfectly calibrated 
plt.figure(4, figsize=(6, 3.3),  facecolor='white')

plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams["axes.edgecolor"] = "black"
plt.rcParams["axes.linewidth"] = 0.7

plt.plot([0, 1], [0, 1], linestyle = ':', color="grey", label = 'Prefectly Calibrated') 
plt.grid(False)


# Plot model's calibration curve 
plt.plot(y, x, marker = '.', label = 'Random Forest classifier', color="red",) 
  
leg = plt.legend(loc = 'lower right') 
plt.xlabel('Predicted Probability') 
plt.ylabel('Fraction of positives') 
plt.title("Climbing Stairs")
plt.tight_layout()

plt.savefig('calibration_curve_climbing.jpg',dpi=300)
plt.show()

###########################################################################

###### Kneeling

import os
import pandas as pd

##set directory
os.chdir('C:/Users/Documents/Mobility decline')


##Import MLFlow libraries
from MLFlow_Classification import *


##Load dataset
file1 = 'desfecho_agachar.csv'
banco = pd.read_csv(file1)
banco.head()

banco.describe()

print(banco['desfecho_agachar'])


##Prepare Experiment
exp = setup(banco, target='desfecho_agachar', normalize=True, normalize_method="zscore", resample=True,
            resample_method="random_over"
           # , remove_multicollinearity=True, multicollinearity_threshold=0.7
           )

X, y, X_train, X_test, y_train, y_test, seed, prep_pipe, _ = exp

X_train.shape

y_train.shape

X_test.shape 

y_test.shape

X_train

y

compare_models(fold=10, round=4, sort="AUC", turbo=True)


##Create models:
rfmodel = create_model(estimator='rf')
catmodel = create_model(estimator='catboost')
ridgemodel = create_model(estimator='ridge')
lrmodel = create_model(estimator='lr')
etmodel = create_model(estimator='et')
gbcmodel = create_model(estimator='gbc')
lightmodel = create_model(estimator='lightgbm')
ldamodel = create_model(estimator='lda')
adamodel = create_model(estimator='ada')
xgbmodel = create_model(estimator='xgboost')
nbmodel = create_model(estimator='nb')
rbfsvmodel = create_model(estimator='rbfsvm')
qdamodel = create_model(estimator='qda')
knnmodel = create_model(estimator='knn')
dtmodel = create_model(estimator='dt')


##Optimization:
rfmodel = tune_model('rf', optimize='AUC')
catmodel = tune_model('catboost', optimize='AUC')
ridgemodel = tune_model('ridge', optimize='AUC')


##Evaluate models
evaluate_model(rfmodel)
evaluate_model(catmodel)
evaluate_model(ridgemodel)
evaluate_model(lrmodel)


##Select best algorithm based on AUROC in test set and obtain other metrics
preds_rfmodel = predict_model(rfmodel)
preds_catmodel = predict_model(catmodel)
preds_lrmodel = predict_model(lrmodel)


## Best thresholds for Random Forest
y_true=preds_rfmodel['desfecho_carregar']
y_pred=preds_rfmodel['Score']

fpr, tpr, thresholds = roc_curve(y_true, y_pred)

res = pd.DataFrame({'FPR': fpr, 'TPR': tpr, 'Threshold': thresholds})
res[['TPR', 'FPR', 'Threshold']]
res.to_excel("thresh_preds_kneeling.xlsx")

gmeans = np.sqrt(tpr * (1-fpr))
ix = argmax(gmeans)
print('Best Threshold=%f, G-Mean=%.3f' % (thresholds[ix], gmeans[ix]))


## Plot SHAP for Random Forest
import matplotlib.pyplot as plt
import shap 

f = plt.figure()
ax = f.add_subplot()
shap_values = shap.TreeExplainer(rfmodel).shap_values(X_test)
shap.summary_plot(shap_values, X_test, max_display=5
                  , plot_type="bar"
                 )
ax.spines['bottom'].set_color('gray')
f.savefig("shap_mobility.png", bbox_inches='tight', dpi=1200, facecolor='white', 
          edgecolor='white', 
          transparent=True)



## ROC curve plot of top-3 algorithms
import sklearn.metrics as metrics

fpr_agachar_rf, tpr_agachar_rf, auc_thresholds_agachar_rf = metrics.roc_curve(preds_rfmodel['desfecho_agachar'],  
                                                  preds_rfmodel['Score'])

fpr_agachar_cat, tpr_agachar_cat, auc_thresholds_agachar_cat = metrics.roc_curve(preds_catmodel['desfecho_agachar'],  
                                                  preds_catmodel['Score'])

fpr_agachar_rbfsvm, tpr_agachar_rbfsvm, auc_thresholds_agachar_rbfsvm = metrics.roc_curve(preds_rbfsvmmodel['desfecho_agachar'],  
                                                  preds_rbfsvmmodel['Score'])

plt.figure(4, figsize=(6, 3.3),  facecolor='white')
plt.style.use('grayscale')

font = {'family': 'sans',
        'color':  'black',
        'weight': 'normal',
        'size': 12,
        }

plt.plot(fpr_agachar_rf,tpr_agachar_rf,label="Random Forest, AUC= 0.81[0.76-0.85]"
        , linestyle='-.', linewidth=1.2
         , color='black'
        # ,  marker='s', markersize=3
        )
plt.plot(fpr_agachar_rbfsvm,tpr_agachar_rbfsvm,label="SVM Radial Kernel, AUC= 0.77[0.73-0.82]"
         , linestyle='-', linewidth=1.2
         , color='gray'
         #, marker='s', markersize=3
        )
plt.plot(fpr_agachar_cat,tpr_agachar_cat,label="CatBoost Classifier, AUC= 0.77[0.72-0.82]"
         , linestyle='--', linewidth=1.2
         , color='darkgray'
         #, marker='^', markersize=3
        )

plt.legend(loc=0)
plt.plot([0,1], [0,1], color='silver', linestyle=':')
plt.xlabel("1-Specificity (False Positive Rate)", fontdict=font, fontweight='bold')
plt.ylabel("Sensitivity (True Positive Rate)", fontdict=font, fontweight='bold')
plt.title('Crouching, Kneeling', fontsize=15)
plt.legend(loc=4, prop={"family":"sans",  'size': 11})
plt.grid(b=None)

plt.savefig('multiple_roc_curve_kneeling.jpg',dpi=300)
plt.show()


## Creating Calibration Curve for RF model
x, y = calibration_curve(y_test, predsrf['Score'], n_bins = 10, normalize = True) 
  
# Plot calibration curve 
    
# Plot perfectly calibrated 
plt.figure(4, figsize=(6, 3.3),  facecolor='white')

plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams["axes.edgecolor"] = "black"
plt.rcParams["axes.linewidth"] = 0.7

plt.plot([0, 1], [0, 1], linestyle = ':', color="grey", label = 'Prefectly Calibrated') 
plt.grid(False)

# Plot model's calibration curve 
plt.plot(y, x, marker = '.', label = 'Random Forest classifier', color="red",) 
  
leg = plt.legend(loc = 'lower right') 
plt.xlabel('Predicted Probability') 
plt.ylabel('Fraction of positives') 
plt.title("Crouching, Kneeling")
plt.tight_layout()

plt.savefig('calibration_curve_kneeling.jpg',dpi=300)
plt.show()

#############################################################################

###### Carrying

import os
import pandas as pd

##set directory
os.chdir('C:/Users/Documents/Mobility decline')


##Import MLFlow libraries
from MLFlow_Classification import *


##Load dataset
file1 = 'desfecho_carregar.csv'
banco = pd.read_csv(file1)
banco.head()

banco.describe()

print(banco['desfecho_carregar'])


##Prepare Experiment
exp = setup(banco, target='desfecho_carregar', normalize=True, normalize_method="zscore", resample=True,
            resample_method="random_over"
           # , remove_multicollinearity=True, multicollinearity_threshold=0.7
           )

X, y, X_train, X_test, y_train, y_test, seed, prep_pipe, _ = exp

X_train.shape

y_train.shape

X_test.shape 

y_test.shape

X_train

y

compare_models(fold=10, round=4, sort="AUC", turbo=True)


##Create models:
rfmodel = create_model(estimator='rf')
catmodel = create_model(estimator='catboost')
ridgemodel = create_model(estimator='ridge')
lrmodel = create_model(estimator='lr')
etmodel = create_model(estimator='et')
gbcmodel = create_model(estimator='gbc')
lightmodel = create_model(estimator='lightgbm')
ldamodel = create_model(estimator='lda')
adamodel = create_model(estimator='ada')
xgbmodel = create_model(estimator='xgboost')
nbmodel = create_model(estimator='nb')
rbfsvmodel = create_model(estimator='rbfsvm')
qdamodel = create_model(estimator='qda')
knnmodel = create_model(estimator='knn')
dtmodel = create_model(estimator='dt')


##Optimization:
rfmodel = tune_model('rf', optimize='AUC')
catmodel = tune_model('catboost', optimize='AUC')
ridgemodel = tune_model('ridge', optimize='AUC')


##Evaluate models
evaluate_model(rfmodel)
evaluate_model(catmodel)
evaluate_model(ridgemodel)
evaluate_model(lrmodel)


##Select best algorithm based on AUROC in test set and obtain other metrics
preds_rfmodel = predict_model(rfmodel)
preds_catmodel = predict_model(catmodel)
preds_lrmodel = predict_model(lrmodel)


## Best thresholds for SVM radial
y_true=preds_rfmodel['desfecho_carregar']
y_pred=preds_rfmodel['Score']

fpr, tpr, thresholds = roc_curve(y_true, y_pred)

res = pd.DataFrame({'FPR': fpr, 'TPR': tpr, 'Threshold': thresholds})
res[['TPR', 'FPR', 'Threshold']]
res.to_excel("thresh_preds_carrying.xlsx")

gmeans = np.sqrt(tpr * (1-fpr))
ix = argmax(gmeans)
print('Best Threshold=%f, G-Mean=%.3f' % (thresholds[ix], gmeans[ix]))


## Plot SHAP for Random Forest
import matplotlib.pyplot as plt
import shap 

f = plt.figure()
ax = f.add_subplot()
shap_values = shap.TreeExplainer(rfmodel).shap_values(X_test)
shap.summary_plot(shap_values, X_test, max_display=5
                  , plot_type="bar"
                 )
ax.spines['bottom'].set_color('gray')
f.savefig("shap_mobility.png", bbox_inches='tight', dpi=1200, facecolor='white', 
          edgecolor='white', 
          transparent=True)



## ROC curve plot of top-3 algorithms
import sklearn.metrics as metrics

fpr_carrying_rf, tpr_carrying_rf, auc_thresholds_carrying_rf = metrics.roc_curve(preds_rfmodel['desfecho_carregar'],  
                                                  preds_rfmodel['Score'])

fpr_carrying_lda, tpr_carrying_lda, auc_thresholds_carrying_lda = metrics.roc_curve(preds_ldamodel['desfecho_carregar'],  
                                                  preds_ldamodel['Score'])

fpr_carrying_ridge, tpr_carrying_ridge, auc_thresholds_carrying_ridge = metrics.roc_curve(preds_ridgemodel['desfecho_carregar'],  
                                                  preds_ridgemodel['pred'])

plt.figure(4, figsize=(6, 3.3),  facecolor='white')
plt.style.use('grayscale')

font = {'family': 'sans',
        'color':  'black',
        'weight': 'normal',
        'size': 12,
        }

plt.plot(fpr_carrying_rf,tpr_carrying_rf,label="Random Forest, AUC= 0.80[0.75-0.84]"
        , linestyle='-.', linewidth=1.2
         , color='black'
        # ,  marker='s', markersize=3
        )
plt.plot(fpr_carrying_lda,tpr_carrying_lda,label="Linear Disc. Analysis, AUC= 0.79[0.74-0.83]"
, linestyle='-', linewidth=1.2
         , color='gray'
         #, marker='s', markersize=3
        )
plt.plot(fpr_carrying_ridge,tpr_carrying_ridge,label="Ridge Classifier, AUC= 0.78[0.74-0.82]"
         , linestyle='--', linewidth=1.2
         , color='darkgray'
         #, marker='^', markersize=3
        )

plt.legend(loc=0)
plt.plot([0,1], [0,1], color='silver', linestyle=':')
plt.xlabel("1-Specificity (False Positive Rate)", fontdict=font, fontweight='bold')
plt.ylabel("Sensitivity (True Positive Rate)", fontdict=font, fontweight='bold')
plt.title('Carrying Weights ', fontsize=15)
plt.legend(loc=4,  prop={"family":"sans",  'size': 11})
plt.grid(b=None)

plt.savefig('multiple_roc_curve_carrying.jpg',dpi=300)
plt.show()


## Creating Calibration Curve for RF model
x, y = calibration_curve(y_test, preds_rfmodel['Score'], n_bins = 10, normalize = True) 
  
# Plot calibration curve 
    
# Plot perfectly calibrated 
plt.figure(4, figsize=(6, 3.3),  facecolor='white')

plt.rcParams['axes.facecolor'] = 'white'
plt.rcParams["axes.edgecolor"] = "black"
plt.rcParams["axes.linewidth"] = 0.7

plt.plot([0, 1], [0, 1], linestyle = ':', color="grey", label = 'Prefectly Calibrated') 
plt.grid(False)

# Plot model's calibration curve 
plt.plot(y, x, marker = '.', label = 'Random Forest classifier', color="red",) 
  
leg = plt.legend(loc = 'lower right') 
plt.xlabel('Predicted Probability') 
plt.ylabel('Fraction of positives') 
plt.title("Carrying Weights")
plt.tight_layout()

plt.savefig('calibration_curve_carrying.jpg',dpi=300)
plt.show()

